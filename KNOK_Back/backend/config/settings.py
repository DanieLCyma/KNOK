"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from corsheaders.defaults import default_headers
import os
from aws_xray_sdk.core import xray_recorder
from aws_xray_sdk.core import patch_all

import logging
import json_log_formatter

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-acglm2hmr87(e-83fxvlq(reeayyih&s50qp1!3ilbj6!3(ymu'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*",]


# Application definition

INSTALLED_APPS = [
    'django_prometheus',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
    'rest_framework',
    'storages',
    'corsheaders',
]

MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'aws_xray_sdk.ext.django.middleware.XRayMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
     #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]


CORS_ALLOWED_ORIGINS = [
    "https://ai-knok.com",
    "https://www.ai-knok.com",           
    "https://api.ai-knok.com",
    "http://yuna-front-test.s3-website.ap-northeast-2.amazonaws.com",
    "http://knok-test-front.s3-website.ap-northeast-2.amazonaws.com",
]

CORS_ALLOW_CREDENTIALS = True

#CORS_ALLOWED_ORIGINS = [
   # "https://ai-knok.com",                # ‚úÖ ÌîÑÎ°†Ìä∏ÏóîÎìú ÎèÑÎ©îÏù∏
  #  "https://www.ai-knok.com",            # ‚úÖ ÏÑúÎ∏åÎèÑÎ©îÏù∏ÎèÑ Í∞ôÏù¥
 #   "https://api.ai-knok.com",            # ‚úÖ API ÏöîÏ≤≠Ïö© ÎèÑÎ©îÏù∏
#]


ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# AWS Cognito ÏÑ§Ï†ï
AWS_REGION = os.environ.get("AWS_REGION")
COGNITO_USER_POOL_ID = os.environ.get("COGNITO_USER_POOL_ID")
COGNITO_APP_CLIENT_ID = os.environ.get("COGNITO_APP_CLIENT_ID")
COGNITO_APP_CLIENT_SECRET = os.environ.get("COGNITO_APP_CLIENT_SECRET")

# --- AWS S3 ÏÑ§Ï†ï ---
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
AWS_AUDIO_BUCKET_NAME = os.environ.get("AWS_AUDIO_BUCKET_NAME")
AWS_FULL_VIDEO_BUCKET_NAME = os.environ.get("AWS_FULL_VIDEO_BUCKET_NAME")
AWS_CLIP_VIDEO_BUCKET_NAME = os.environ.get("AWS_CLIP_VIDEO_BUCKET_NAME")
AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME')
AWS_S3_CUSTOM_DOMAIN = "ai-knok.com"
AWS_TTS_BUCKET_NAME = os.environ.get("TTS_BUCKET_NAME")
AWS_FOLLOWUP_QUESTION_BUCKET_NAME = os.environ.get("AWS_FOLLOWUP_QUESTION_BUCKET_NAME")
AWS_SIMPLE_QUEUE_SERVICE = os.environ.get("AWS_SIMPLE_QUEUE_SERVICE")
FASTAPI_WEBSOCKET_URL = os.environ.get("FASTAPI_WEBSOCKET_URL")

try:
    print("‚úÖ [settings.py] ÌôòÍ≤ΩÎ≥ÄÏàò Î°úÎìú ÏôÑÎ£å")
    print("  - S3 Î≤ÑÌÇ∑ Ïù¥Î¶Ñ:", AWS_STORAGE_BUCKET_NAME)
    print("  - Î¶¨Ï†Ñ:", AWS_REGION)
    print("  - Cognito Client ID:", COGNITO_APP_CLIENT_ID)
except Exception as e:
    print("‚ùå [settings.py] ÌôòÍ≤ΩÎ≥ÄÏàò Î°úÎìú Ïã§Ìå®:", e)


DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'myapp.authentication.CognitoJWTAuthentication',
    ]
}


CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = list(default_headers) + [
    'authorization',
    'content-type',
]


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "VERIFY_AUDIENCE": False,  # üëà Ïù¥ Ï§ÑÏù¥ ÌïµÏã¨ÏûÖÎãàÎã§
}

# History ÌéòÏù¥ÏßÄÏóêÏÑú ÏÇ¨Ïö©Ìï† CloudFront ÌÇ§
CLOUDFRONT_KEY_PAIR_ID = os.environ.get("CLOUDFRONT_KEY_PAIR_ID")
CLOUDFRONT_DOMAIN = os.environ.get("CLOUDFRONT_DOMAIN")
CLOUDFRONT_SECRET_NAME=os.environ.get("CLOUDFRONT_SECRET_NAME")

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {
            '()': 'config.logging_json.CustomJsonFormatter',   
        },
    },
    'filters': {
        'add_xray_trace_id': {
            '()': 'config.logging_xray_traceid.XRayTraceIdFilter',  # ÌååÏùºÎ™Ö.ÌÅ¥ÎûòÏä§Î™Ö
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',  # Í∏∞Î≥∏ Î°úÍ∑∏ Î†àÎ≤®: INFO Ïù¥ÏÉÅÎßå Ï∂úÎ†•
            'class': 'logging.StreamHandler',
            'formatter': 'json',
            'filters': ['add_xray_trace_id'],
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        # Django ÎÇ¥Î∂Ä Î°úÍ∑∏
        'django': {
            'handlers': ['console'],
            'level': 'WARNING',  # ÎÑàÎ¨¥ Ïû¶ÏùÄ INFO Î°úÍ∑∏ ÏñµÏ†ú
            'propagate': False,
        },
        # boto3 ÎùºÏù¥Î∏åÎü¨Î¶¨ Î°úÍ∑∏ ÏñµÏ†ú
        'boto3': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'botocore': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        # Ïù¥ÎØ∏ÏßÄ Ï≤òÎ¶¨ Î°úÍ∑∏ ÏñµÏ†ú
        'PIL': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        # urllib3 ÌÜµÏã† Î°úÍ∑∏ ÏñµÏ†ú
        'urllib3': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        # ÌïÑÏöîÌï† Í≤ΩÏö∞Îßå DEBUG ÌóàÏö©
        'myapp': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

xray_recorder.configure(
    service='knok-backend-service',
    daemon_address='127.0.0.1:2000',  # ECS Task ÎÇ¥ xray-daemon ÏÇ¨Ïù¥ÎìúÏπ¥ Ï£ºÏÜå
    sampling=True
)

patch_all() 
